import { parseModules, parseString, parseSections } from "@/utils/helpers";
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { Configuration, OpenAIApi } from "openai";
import { getUserPreference } from "../preferenceReducer";
const initialState = {
  topics: [] as any,
  isLoading: false,
  isCompleted: false,
  error: null as any,
  hasTyped: false,
  isExpandLoading: false,
  isCompletedExpand: false,
  expandedTopics: [] as any,
  detailedTopic: "" as any,
  isDetailedLoading: false,
  isCompletedDetailed: false,
  searchHistory: [] as any,
  expandedTopicTitle: null,
  isFetched: false, // add this property
  // new property
};

const configuration = new Configuration({
  organization: "org-iW0tOES3m75oHB2cx9IxyB8I",
  apiKey: "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",
});

const openai = new OpenAIApi(configuration);

export const searchTopicAsync = createAsyncThunk(
  "search/searchTopic",
  async (query: any) => {
    const preference = JSON.parse(localStorage.getItem("preference") as any);

    const completion = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: `break the concept of ${query} into smaller modules for ${preference.difficultyLevel} learners. note ignore any non meaningfull words and focus on the keys that can be learned or outlined by you and make this query consistent never change it upon evey request`,
      temperature: 1,
      top_p: 0.5,
      max_tokens: 200,
    });
    return parseString(completion.data.choices[0]?.text);
  }
);

// export const expandTopicAsync = createAsyncThunk(
//   "search/expandTopic",
//   async (title:any, id) => {
//     const completion = await openai.createCompletion({
//       model: "text-davinci-003",
//       // prompt: `Please break down the sub-component of ${title} into even smaller modules for beginners. Focus on the most important and basic concepts and ideas that are necessary for understanding this ${title}. Please use simple and clear language and avoid any unnecessary technical jargon.`,
//       // prompt: `Please break down the sub-component of ${title} into even smaller modules for beginners and explain the concept ${title} into very details beginners with examples. Focus on the most important and basic concepts and ideas that are necessary for understanding this ${title}. Please use simple and clear language and avoid any unnecessary technical jargon.`,
//       prompt: `Please provide a numbered list of subtopics and detailed explanations for the concept of ${title}. Ensure that the explanations are beginner-friendly and include examples. Focus on the most important and basic concepts and ideas necessary for understanding ${title}. Use simple, clear language and avoid unnecessary technical jargon. Each subtopic should start with a number followed by a brief title, and then a paragraph of explanation.`,
//       temperature: 1,
//       top_p: 0.5,
//       max_tokens: 50,
//     });
//     // return parseString(completion.data.choices[0]?.text);
//     console.log("@#@#######@#@-", completion.data.choices[0]?.text);
//     const parsedData = parseSections(completion.data.choices[0]?.text);
//     localStorage.setItem(title, JSON.stringify(parsedData)); // Store fetched data in localStorage
//     return parsedData
//   }
// );

export const expandTopicAsync = createAsyncThunk(
  "search/expandTopic",
  async (title: any, { getState }: any) => {
    const preference = JSON.parse(localStorage.getItem("preference") as any);
    const expandedTopic = getState().search.expandedTopics.find(
      (topic: any) => topic.title === title
    );
    if (expandedTopic) {
      return expandedTopic.content;
    }
    const cachedData = localStorage.getItem(title);
    if (cachedData) {
      return JSON.parse(cachedData);
    }
    const completion = await openai.createCompletion({
      // model: "text-davinci-003",
      model: "text-curie-001",
      prompt: `Please provide a numbered list of subtopics for the concept of ${title} for ${preference.difficultyLevel} learners. Ensure that the explanations are ${preference.difficultyLevel} learners. Focus on the most important and basic concepts and ideas necessary for understanding ${title}. Use simple, clear language and avoid unnecessary technical jargon. `,
      top_p: 0.5,
      max_tokens: 20,
    });
    const parsedData = parseSections(completion.data.choices[0]?.text);

    localStorage.setItem(title, JSON.stringify(parsedData));
    return parsedData;
  }
);

export const detailedTopic = createAsyncThunk(
  "search/detailedTopic",
  async (title) => {
    const preference = JSON.parse(localStorage.getItem("preference") as any);
    const completion = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: `explain the concept ${title} into very details for ${preference.difficultyLevel} learners. Focus on the most Please use simple and clear language and avoid any unnecessary technical jargon. Note: Please be consistent with the sub-component you are breaking down and do not change it upon every request`,
      //   prompt: ` explain the concept ${title} into very details beginners keep in mind we are talking about the history of ghana. Focus on the most Please use simple and clear language and avoid any unnecessary technical jargon. Note: Please be consistent with the sub-component you are breaking down and do not change it upon every request`,
      temperature: 1,
      top_p: 0.5,
      max_tokens: 20,
    });

    return completion.data.choices[0]?.text;
  }
);

export const userTypedSearch = () => {
  return { type: "search/userTyped" };
};

export const searchSlice = createSlice({
  name: "search",
  initialState,
  reducers: {
    userTyped: (state) => {
      state.hasTyped = true;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(searchTopicAsync.pending, (state) => {
        state.isLoading = true;
        state.isCompleted = !state.isCompleted;
      })
      .addCase(searchTopicAsync.fulfilled, (state, action) => {
        state.isLoading = false;
        state.topics = action.payload;
      })
      .addCase(searchTopicAsync.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.error.message;
      })
      .addCase(expandTopicAsync.pending, (state) => {
        state.isExpandLoading = true;
        state.isCompletedExpand = !state.isCompleted;
      })
      .addCase(expandTopicAsync.fulfilled, (state, action) => {
        state.isExpandLoading = false;
        state.expandedTopics = action.payload;
      })
      .addCase(expandTopicAsync.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.error.message;
      })
      .addCase(detailedTopic.pending, (state) => {
        state.isDetailedLoading = true;
      })
      .addCase(detailedTopic.fulfilled, (state, action) => {
        state.isDetailedLoading = false;
        state.detailedTopic = action.payload;
      })
      .addCase(detailedTopic.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.error.message;
      });
  },
});

export default searchSlice.reducer;
