'use client';
import { Message } from '@/types/chat';
import { IconCheck, IconCopy, IconEdit, IconUser, IconRobot, IconBrain, IconPdf } from '@tabler/icons-react';
import { useTranslation } from 'next-i18next';
import { FC, memo, useEffect, useRef, useState } from 'react';
// import rehypeMathjax from 'rehype-mathjax';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';
import { CodeBlock } from '../Markdown/CodeBlock';
import { MemoizedReactMarkdown } from '../Markdown/MemoizedReactMarkdown';
import { useUser } from '@auth0/nextjs-auth0/client';
import { Document, Page, Text, View, StyleSheet, PDFDownloadLink } from '@react-pdf/renderer';
import Image from 'next/image';
import useUserSubscription from '@/utils/useUserSubscription';

interface Props {
  message: Message;
  messageIndex: number;
  onEditMessage: (message: Message, messageIndex: number) => void;
}

export const ChatMessage: FC<Props> = memo(({ message, messageIndex, onEditMessage }) => {
  const styles = StyleSheet.create({
    page: {
      backgroundColor: '#1D1E1F',
      color: '#F5F5F5',
      padding: 25,
      fontSize: 12,
      lineHeight: 1.5,
      fontFamily: 'Helvetica',
    },
    title: {
      fontSize: 28,
      fontWeight: 'bold',
      marginBottom: 20,
      textTransform: 'uppercase',
      letterSpacing: 1,
      color: '#F5F5F5',
    },
    subtitle: {
      fontSize: 18,
      fontWeight: 'bold',
      marginBottom: 10,
      color: '#F5F5F5',
    },
    text: {
      marginBottom: 10,
      color: '#F5F5F5',
    },
    highlight: {
      backgroundColor: '#F5F5F5',
      color: '#1D1E1F',
      padding: 5,
      borderRadius: 5,
    },
    footer: {
      position: 'absolute',
      bottom: 10,
      left: 0,
      right: 0,
      textAlign: 'center',
      fontSize: 8,
      color: '#F5F5F5',
    },
    logo: {
      width: 30,
      height: 30,
      marginRight: 5,
    },
  });

  const { t } = useTranslation('chat');
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [isTyping, setIsTyping] = useState<boolean>(false);
  const [messageContent, setMessageContent] = useState(message.content);
  const [messagedCopied, setMessageCopied] = useState(false);

  const [fileName, setFileName] = useState('splorite');
  const [title, setTitle] = useState('');
  const { user, error } = useUser();
  const { isSubscribed, isLoading, isError } = useUserSubscription(user?.sub);

  useEffect(() => {
    setFileName(title);
  }, [title]);

  const handleDownloadClick = () => {
    const newTitle = window.prompt('Enter the title of the PDF:');
    const newFileName = window.prompt('Enter the file name of the PDF:');
    if (newTitle && newFileName) {
      setTitle(newTitle);
      setFileName(newFileName);
    } else {
      alert('Please enter a valid file name and title.');
    }
  };

  console.log('title', title);

  const MyDocument = ({ title }) => (
    // <Document title={title}>
    //   <Page style={styles.page}>
    //     <Text style={styles.title}>{title}</Text>
    //     <Text style={styles.paragraph}>{message.content}</Text>
    //   </Page>
    // </Document>
    <Document title={title}>
      <Page style={styles.page}>
        <Text style={styles.title}>{title}</Text>
        <Text style={styles.text}>{message.content}</Text>

        <View style={styles.footer}>
          <Text>Generated by Splorite PDF Generato</Text>
          <Text>Splorite Â© 2023</Text>
          <Text>www.splorite.com</Text>
        </View>
      </Page>
    </Document>
  );

  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const toggleEditing = () => {
    setIsEditing(!isEditing);
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    setMessageContent(event.target.value);
    if (textareaRef.current) {
      textareaRef.current.style.height = 'inherit';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  };

  const handleEditMessage = () => {
    if (message.content != messageContent) {
      onEditMessage({ ...message, content: messageContent }, messageIndex);
    }
    setIsEditing(false);
  };

  const handlePressEnter = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !isTyping && !e.shiftKey) {
      e.preventDefault();
      handleEditMessage();
    }
  };

  const copyOnClick = () => {
    if (!navigator.clipboard) return;

    navigator.clipboard.writeText(message.content).then(() => {
      setMessageCopied(true);
      setTimeout(() => {
        setMessageCopied(false);
      }, 2000);
    });
  };

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'inherit';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [isEditing]);

  return (
    <div className={`group px-2`} style={{ overflowWrap: 'anywhere' }}>
      <div className='relative m-auto flex gap-4 p-2 text-base md:max-w-2xl md:gap-6 md:py-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl'>
        <div className='left-2 min-w-[40px] text-right font-bold'>
          {message.role === 'assistant' ? (
            <IconBrain size={33} className='rounded-lg bg-blue-600 text-white  ring-4' />
          ) : (
            <Image alt='name' className='h-8 w-8 rounded-lg ring-4' src={user?.picture} width='100' height='100' />
          )}
        </div>

        <div className='prose mt-[-2px] w-full dark:prose-invert'>
          {message.role === 'user' ? (
            <div className='flex w-full rounded-lg bg-neutral-100 py-3 px-3 dark:bg-[#151718]'>
              {isEditing ? (
                <div className='flex w-full flex-col'>
                  <textarea
                    ref={textareaRef}
                    className='
                    out m-0 w-full resize-none
                    border-0
                                bg-[#151718] p-0 py-4 pr-8 pl-2 text-black outline-none focus:border-sky-500  focus:outline-none focus:ring-0 focus:ring-sky-500 dark:bg-transparent dark:text-white md:py-3 md:pl-4'
                    value={messageContent}
                    onChange={handleInputChange}
                    onKeyDown={handlePressEnter}
                    onCompositionStart={() => setIsTyping(true)}
                    onCompositionEnd={() => setIsTyping(false)}
                    style={{
                      fontFamily: 'inherit',
                      fontSize: 'inherit',
                      lineHeight: 'inherit',
                      padding: '0',
                      margin: '0',
                      overflow: 'hidden',
                    }}
                  />

                  <div className='mt-10 flex justify-center space-x-4'>
                    <button
                      className='h-[40px] rounded-md bg-blue-500 px-4 py-1 text-sm font-medium text-white enabled:hover:bg-blue-600 disabled:opacity-50'
                      onClick={handleEditMessage}
                      disabled={messageContent.trim().length <= 0}
                    >
                      {t('Save & Submit')}
                    </button>
                    <button
                      className='h-[40px] rounded-md border border-neutral-300 px-4 py-1 text-sm font-medium text-neutral-700 hover:bg-neutral-100 dark:border-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-800'
                      onClick={() => {
                        setMessageContent(message.content);
                        setIsEditing(false);
                      }}
                    >
                      {t('Cancel')}
                    </button>
                  </div>
                </div>
              ) : (
                <div className='prose whitespace-pre-wrap dark:prose-invert'>{message.content}</div>
              )}

              {(window.innerWidth < 640 || !isEditing) && (
                <button
                  className={`absolute translate-x-[1000px] text-gray-500 hover:text-gray-700 focus:translate-x-0 group-hover:translate-x-0 dark:text-gray-400 dark:hover:text-gray-300 ${
                    window.innerWidth < 640 ? 'right-3 bottom-1' : 'right-0 top-[26px]'
                  }
                    `}
                  onClick={toggleEditing}
                >
                  <IconEdit size={20} />
                </button>
              )}
            </div>
          ) : (
            <>
              <div className={`absolute ${window.innerWidth < 640 ? 'right-3 bottom-1' : 'right-3 bottom-1'}`}>
                {messagedCopied ? (
                  <IconCheck size={20} className='text-green-500 dark:text-green-400' />
                ) : (
                  <div className='flex flex-row items-center space-x-2'>
                    <button
                      className='translate-x-[1000px] text-gray-500 hover:text-gray-700 focus:translate-x-0 group-hover:translate-x-0 dark:text-gray-400 dark:hover:text-gray-300'
                      onClick={copyOnClick}
                    >
                      <IconCopy size={20} />
                    </button>

                    {isSubscribed ? (
                      <button className='translate-x-[1000px] text-gray-500 hover:text-gray-700 focus:translate-x-0 group-hover:translate-x-0 dark:text-gray-400 dark:hover:text-gray-300'>
                        <PDFDownloadLink className='decoration-transparent' document={<MyDocument title={title} />} fileName={fileName} onClick={handleDownloadClick}>
                          <IconPdf size={25} />
                        </PDFDownloadLink>
                      </button>
                    ) : (
                      ''
                    )}

                    {/* <button onClick={handleGeneratePdf}>Generate Document</button> */}
                  </div>
                )}
              </div>
              <MemoizedReactMarkdown
                className='prose mb-12  dark:prose-invert sm:mb-0'
                remarkPlugins={[remarkGfm, remarkMath]}
                // rehypePlugins={[rehypeMathjax]}
                components={{
                  code({ node, inline, className, children, ...props }) {
                    const match = /language-(\w+)/.exec(className || '');

                    return !inline && match ? (
                      <CodeBlock key={Math.random()} language={match[1]} value={String(children).replace(/\n$/, '')} {...props} />
                    ) : (
                      <code className={className} {...props}>
                        {children}
                      </code>
                    );
                  },
                  table({ children }) {
                    return <table className='border-collapse border border-black py-1 px-3 dark:border-white'>{children}</table>;
                  },
                  th({ children }) {
                    return <th className='break-words border border-black bg-gray-500 py-1 px-3 text-white dark:border-white'>{children}</th>;
                  },
                  td({ children }) {
                    return <td className='break-words border border-black py-1 px-3 dark:border-white'>{children}</td>;
                  },
                }}
              >
                {message.content}
              </MemoizedReactMarkdown>
            </>
          )}
        </div>
      </div>
    </div>
  );
});
ChatMessage.displayName = 'ChatMessage';
